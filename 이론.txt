# 힙
- 힙의 어원 : '아무렇게나 쌓여진 건초더미'. 자료구조의 힙, 메모리 영역의 힙 2가지가 있으며 어원은 같으나 방향이 전혀 다름.
- 자료구조의 힙 : 우선순위 큐를 구현할 때 주로 사용. 최대 or 최소값을 빠르게 찾는데 최적화
- 메모리 영역의 힙 : 운영체제가 프로그램 실행 중 동적으로 할당하는 메모리 영역
  * 사용하는 이유 : 필요한 때, 필요한 영역만큼만 사용 가능

# C : malloc과 free 함수 / C++은 new와 delete
- 형태
  void* malloc(size_t size);
  void free(void* p);
- malloc : 시작 주소를 반환, free : 해제
- size_t size : typedef로 재정의되어 만들어진 자료형
- 사용
   int* p = NULL;
   p = (int*) malloc(4);
   ...
   free(p);
- int* p : 변수 선언. p를 가르키는 포인터
- 숫자만큼 메모리를 할당하고, 그 시작 주소(void*)를 반환
- (int*) : 형 변환. malloc이 반환하는 void*를 int*로 변환하겠다는 의미

#Vector
- 뜻은 '운반하다'. 수학에서는 크기와 방향을 가진 값을 의미하며, 프로그래밍에서는 연속적으로 저장하면서 '운반'하는 역할을 해서 명명
- STL(Standard Template Library)의 컨테이너 중 하나
- 동적 배열 형태의 자료 구조(= 크기가 자동으로 조정. 배열과 유사하나 보다 유연)
- 내부적으로 메모리를 재할당할 때, 기존 크기의 2배로 증가시킴
- 빠른 인덱스 접근 가능
- 끝 단에서 push, pop 기능은 매우 빠름
- 반복자(iterator) 지원 : begin, end
- vector와 queue 사용 방식 상에는 비슷함. 다만 vector의 경우 메모리가 물리적으로 연속적, queue의 경우 정크데이터들을 포인터(주소)로 일일이 연결. 따라서 queue의 경우 추가적인 메모리 사용이 있음

<사용 방법>
- #include <vector> 헤더 선언
- vecotr<int> v : 비어있는 벡터 v 선언
- vecotr<int> v(N) : v선언. 길이는 N, 내부는 '0'으로 초기화
- vecotr<int> v(N, 1) : 위와 동일. 내부는 '1'로 초기화
- vector<int> vCopy(v) : v를 복사한  vCopy 벡터 생성
- v[idx] : v의 idx 위치의 데이터 참조
- v.at[idx] : 위와 동일. 더 느리지만 범위 초과를 방지해줌
- v.front() : 1번째 데이터 참조
- v.back() : 마지막 데이터 참조
- v.begin() : 1번째 데이터를 가르킴(포인터와 비슷한 iterator)
- v.end() : 마지막 데이터 가리킴
- v.push_back(N) : 마지막 데이터에 N 삽입
- v.pop_back() : 마지막 데이터 제거
- v.clear() : 데이터 초기ㅣ화
- v.reserve(N) : N개의 데이터 저장 공간 동적 할당
- v.capacity() : 데이터에 할당된 메모리
- v.size() : 위에 것에서 데이터가 실제로 들어간 메모리량
- v2.swap(v1) : v1과 v2의 내용 전부 맞교환
- v.insert(5, 2) : 5번째 위치에 2를 삽입
- v.insert(5, 2, 3) : 5번째 위치에 2를 3개 삽입
- v.empty() : v를 비

# 복사 생성자 : T(const T& a);
- T : 생성자의 이름. 클래스명과 같음. Type의 약속된 이름
- const T& a : 같은 클래스 타입의 객체를 상수 참조로 받음
- const 붙이는 이유는 원본을 수정하지 않기 위해
- 다만 int, long의 경우는 작아서 관례상 const를 사용하지 않고, struct, class, string등에는 사용

# 소멸자 : ~A(  );
- 동적 메모리만 사용하는 것만 포함하면 됨 -> 안하면 메모리 누수
- 자동으로 생기나, 필요시 코드 수정 필요

# 복사 생성자
- deep copy : 메모리까지 새로 할당해서 내용 복사
- shallow copy : 단순 값만 대입

# '\0'은 널문자로. 문자열의 끝을 알리는 마침표 역할

# set.find와 find(arr.begin(), arr.end(), tmp)
- .find의 경우 이진 탐색 트리 구조 기반이라 Olog(N)
- 후자의 경우 O(N)이라 속도 차이가 큼

# '\n'과 std::endl의 시간복잡도
- 전자의 경우 O(1), 후자의 경우 버퍼도 비워야하기에 속도가 상대적으로 느림
- 따라서 루프 안에서는 반드시 '\n' 사용이 권장됨
